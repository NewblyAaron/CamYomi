default:
  image: alvrme/alpine-android:android-34-jdk17
  tags:
    - intern
  cache: &gradle-cache
    key: $CI_COMMIT_REF_SLUG
    paths:
      - .gradle/wrapper
      - .gradle/caches

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_TAG

stages:
  - build
  - test
  - prepare
  - deploy

variables:
  GRADLE_USER_HOME: "$CI_PROJECT_DIR/.gradle"

before_script:
  # Install curl and jq
  - apk add curl jq
  # Not necessary, but just for surity
  - chmod +x ./gradlew

# Check linting
detektDebug:
  interruptible: true
  stage: build
  script:
    - ./gradlew -Pci --console=plain :app:detektDebug -PbuildDir=lint
  cache:
    <<: *gradle-cache
    policy: pull # should not push
  artifacts:
    reports:
      codequality: "app/lint/reports/detekt/gitlab.json"
    paths:
      - app/lint/reports/detekt/debug.html
    expose_as: "detekt-report"
    when: always

androidLintDebug:
  needs: [detektDebug]
  interruptible: true
  stage: build
  script:
    - ./gradlew -Pci --console=plain :app:lintDebug -PbuildDir=lint
  cache:
    <<: *gradle-cache
    policy: pull # should not push
  artifacts:
    paths:
      - app/lint/reports/lint-results-debug.html
    expose_as: "lint-report"
    when: always

assembleDebug:
  needs: [androidLintDebug, detektDebug]
  interruptible: true
  stage: build
  script:
    - ./gradlew -Pci --console=plain :app:assembleDebug
  cache:
    <<: *gradle-cache
  artifacts:
    paths:
      - app/build/outputs/apk/debug

# Run all tests, if any fails, interrupt the pipeline (fail it)
debugTests:
  needs: [assembleDebug]
  interruptible: true
  stage: test
  script:
    - ./gradlew -Pci --console=plain :app:testDebug
  cache:
    <<: *gradle-cache
    policy: pull # should not push
  artifacts:
    reports:
      junit: app/build/test-results/**/*.xml

# Create a changelog file
prepareChangelog:
  interruptible: true
  stage: prepare
  image: alpine:latest
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v?\d+\.\d+\.\d+$/' # only run when commited tag follows semantic versioning
  script:
    - 'curl -H "PRIVATE-TOKEN: $CI_API_TOKEN" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/changelog?version=$CI_COMMIT_TAG" | jq -r .notes > release_notes.md'
  cache: {}
  artifacts:
    paths:
      - release_notes.md

# Build the release application
assembleRelease:
  interruptible: true
  stage: prepare
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v?\d+\.\d+\.\d+$/' # only run when commited tag follows semantic versioning
  variables:
    SECURE_FILES_DOWNLOAD_PATH: "$CI_PROJECT_DIR/.secrets"
    KEYSTORE_FILE: "${SECURE_FILES_DOWNLOAD_PATH}/android_keystore.jks"
  script:
    # Download the secret files for deployment to Firebase App Distribution
    - curl --silent "https://gitlab.com/gitlab-org/incubation-engineering/mobile-devops/download-secure-files/-/raw/main/installer" | bash
    - ./gradlew -Pci --console=plain :app:assembleRelease
      -Pandroid.injected.signing.store.file=$KEYSTORE_FILE
      -Pandroid.injected.signing.store.password=$KEYSTORE_PASSWORD
      -Pandroid.injected.signing.key.alias=$KEY_ALIAS
      -Pandroid.injected.signing.store.password=$KEY_PASSWORD
  cache:
    <<: *gradle-cache
  artifacts:
    paths:
      - app/build/outputs/apk/release

# Deploy to Firebase App Distribution
deployFirebaseAppDist:
  needs:
    - job: assembleRelease
      artifacts: true
    - job: prepareChangelog
      artifacts: true
  interruptible: true
  stage: deploy
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v?\d+\.\d+\.\d+$/' # only run when commited tag follows semantic versioning
  variables:
    SECURE_FILES_DOWNLOAD_PATH: "$CI_PROJECT_DIR/.secrets"
    GOOGLE_APPLICATION_CREDENTIALS: "$SECURE_FILES_DOWNLOAD_PATH/camyomi-c7fe7-9d3694bc6be0.json"
  script:
    # Download the secret files for deployment to Firebase App Distribution
    - curl --silent "https://gitlab.com/gitlab-org/incubation-engineering/mobile-devops/download-secure-files/-/raw/main/installer" | bash
    - ./gradlew -Pci --console=plain :app:appDistributionUploadRelease
      --releaseNotesFile="./release_notes.md"
  cache: {}

# Create release in GitLab repository
uploadRelease:
  needs:
    - job: assembleRelease
      artifacts: true
  stage: deploy
  image: alpine:latest
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v?\d+\.\d+\.\d+$/' # only run when commited tag follows semantic versioning
  variables:
    REGEX_PATTERN: '^v([0-9]+\.[0-9+]+\.[0-9+]+)$'
  script:
    # get only the version number (without the "v" in "v#.#.#")
    - if [[ $CI_COMMIT_TAG =~ $REGEX_PATTERN ]]; then export PACKAGE_VERSION=${BASH_REMATCH[1]}; fi
    - 'echo "Version: $PACKAGE_VERSION"'
    - 'curl --fail-with-body --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file app/build/outputs/apk/release/apk-release.apk "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/camyomi/${PACKAGE_VERSION}/apk-release.apk"'
  cache: {}

deployGitlabRelease:
  needs:
    - job: uploadRelease
    - job: prepareChangelog
      artifacts: true
  interruptible: true
  stage: deploy
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v?\d+\.\d+\.\d+$/' # only run when commited tag follows semantic versioning
  script:
    - echo "Creating release"
  release:
    name: "Release $CI_COMMIT_TAG"
    description: release_notes.md
    tag_name: "$CI_COMMIT_TAG"
    ref: "$CI_COMMIT_SHA"
    assets:
      links:
        - name: "CamYomi $CI_COMMIT_TAG"
          url: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/camyomi/${PACKAGE_VERSION}/apk-release.apk"
  cache: {}