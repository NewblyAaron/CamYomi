default:
  image: alvrme/alpine-android:android-34-jdk17
  tags:
    - intern
  cache: &gradle-cache
    key: $CI_COMMIT_REF_SLUG
    paths:
      - .gradle/wrapper
      - .gradle/caches

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_TITLE =~ /^Draft:/
      when: never
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: '$CI_COMMIT_TAG =~ /^v?\d+\.\d+\.\d+$/' # only run when commited tag follows semantic versioning
    - if: $CI_PIPELINE_SOURCE == 'web'

stages:
  - build
  - test
  - prepare
  - deploy

variables:
  GRADLE_USER_HOME: "$CI_PROJECT_DIR/.gradle"

before_script:
  # Not necessary, but just for surity
  - chmod +x ./gradlew

# Check linting
detektDebug:
  interruptible: true
  stage: build
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          - "app/**/*"
          - "config/detekt/**/*"
          - "gradle/**/*"
          - "build.gradle.kts"
          - "settings.gradle.kts"
          - "gradle.properties"
    - when: never
  script:
    - ./gradlew -Pci --console=plain detektDebug -PbuildDir=lint
  cache:
    <<: *gradle-cache
    policy: pull # should not push
  artifacts:
    reports:
      codequality: "app/lint/reports/detekt/gitlab.json"
    paths:
      - app/lint/reports/detekt/debug.html
    expose_as: "detekt-report"
    when: always

androidLintDebug:
  interruptible: true
  stage: build
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          - "app/**/*"
          - "config/detekt/**/*"
          - "gradle/**/*"
          - "build.gradle.kts"
          - "settings.gradle.kts"
          - "gradle.properties"
    - when: never
  script:
    - ./gradlew -Pci --console=plain lintDebug -PbuildDir=lint
  cache:
    <<: *gradle-cache
    policy: pull # should not push
  artifacts:
    paths:
      - app/lint/reports/lint-results-debug.html
    expose_as: "lint-report"
    when: always

assembleDebug:
  interruptible: true
  stage: build
  rules:
    - if: $CI_COMMIT_TAG
      needs: [detektDebug, androidLintDebug]
    - when: on_success
  script:
    - ./gradlew -Pci --console=plain assembleDebug
  cache:
    <<: *gradle-cache
  artifacts:
    paths:
      - app/build/outputs/apk/debug

# Run all tests, if any fails, interrupt the pipeline (fail it)
debugTests:
  needs: [assembleDebug]
  interruptible: true
  stage: test
  script:
    - ./gradlew -Pci --console=plain testDebug
  cache:
    <<: *gradle-cache
    policy: pull # should not push
  artifacts:
    reports:
      junit: app/build/test-results/**/*.xml

# Build the release application
assembleRelease:
  interruptible: true
  stage: prepare
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: never
    - if: '$CI_COMMIT_TAG =~ /^v?\d+\.\d+\.\d+$/'
    - if: $CI_PIPELINE_SOURCE == 'web'
      when: manual
  variables:
    SECURE_FILES_DOWNLOAD_PATH: "./secrets"
  before_script:
    # Download the secret files for deployment to Firebase App Distribution
    - curl --silent "https://gitlab.com/gitlab-org/incubation-engineering/mobile-devops/download-secure-files/-/raw/main/installer" | bash
    - export KEYSTORE_FILE=$(pwd)/secrets/android_keystore.jks
    - chmod 644 $KEYSTORE_FILE
  script:
    - './gradlew -Pci --console=plain assembleRelease -Pandroid.injected.signing.store.file=$KEYSTORE_FILE -Pandroid.injected.signing.store.password=$KEYSTORE_PASSWORD -Pandroid.injected.signing.key.alias=$KEY_ALIAS -Pandroid.injected.signing.key.password=$KEY_PASSWORD'
  cache:
    <<: *gradle-cache
  artifacts:
    paths:
      - app/build/outputs/apk/release

# Create a changelog file
prepareChangelog:
  interruptible: true
  stage: prepare
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v?\d+\.\d+\.\d+$/'
  image: alpine:latest
  before_script:
    - apk add curl jq
  script:
    - 'echo "Commit tag: $CI_COMMIT_TAG"'
    - 'curl -H "PRIVATE-TOKEN: $CI_API_TOKEN" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/changelog?version=$CI_COMMIT_TAG" | jq -r .notes > release_notes.md'
    - cat release_notes.md
  cache: {}
  artifacts:
    paths:
      - release_notes.md

# Deploy to Firebase App Distribution
deployFirebaseAppDist:
  interruptible: true
  stage: deploy
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v?\d+\.\d+\.\d+$/'
      needs: [prepareChangelog]
  variables:
    SECURE_FILES_DOWNLOAD_PATH: "./secrets"
  before_script:
      # Download the secret files for deployment to Firebase App Distribution
      - curl --silent "https://gitlab.com/gitlab-org/incubation-engineering/mobile-devops/download-secure-files/-/raw/main/installer" | bash
      - export GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/secrets/camyomi-c7fe7-9d3694bc6be0.json
      - chmod 644 $GOOGLE_APPLICATION_CREDENTIALS
  script:
    - ./gradlew -Pci --console=plain appDistributionUploadRelease
      --releaseNotesFile="./release_notes.md"
  cache: {}

# Create release in GitLab repository
uploadRelease:
  interruptible: true
  stage: deploy
  image: alpine:latest
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v?\d+\.\d+\.\d+$/'
      needs: [prepareChangelog]
  before_script:
    - apk add curl
  script:
    - 'echo "Version: $CI_COMMIT_TAG"'
    - 'curl --fail-with-body --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ./app/build/outputs/apk/release/apk-release.apk "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/camyomi/${CI_COMMIT_TAG}/apk-release.apk"'
  cache: {}

deployGitlabRelease:
  interruptible: true
  stage: deploy
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v?\d+\.\d+\.\d+$/'
      needs: [uploadRelease]
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - 'echo "Creating release $CI_COMMIT_TAG"'
  release:
    name: "Release $CI_COMMIT_TAG"
    description: release_notes.md
    tag_name: "$CI_COMMIT_TAG"
    ref: "$CI_COMMIT_SHA"
    assets:
      links:
        - name: "CamYomi $CI_COMMIT_TAG"
          url: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/camyomi/${CI_COMMIT_TAG}/apk-release.apk"
  cache: {}